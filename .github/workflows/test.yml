---
name: Test

"on":
  pull_request:
  push:
    branches:
      - main

jobs:
  test:
    strategy:
      matrix:
        clojure: ["1.10.3.1049"]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: DeLaGuardo/setup-clojure@3.7
        with:
          cli: ${{ matrix.clojure }}
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - run: sudo apt-get update
      - name: Setup cljstyle
        run: |
          curl -fsLO https://raw.githubusercontent.com/greglook/cljstyle/main/script/install-cljstyle
          chmod +x install-cljstyle
          sudo ./install-cljstyle
      - name: Setup clj-kondo
        run: |
          curl -fsLO https://raw.githubusercontent.com/clj-kondo/clj-kondo/master/script/install-clj-kondo
          chmod +x install-clj-kondo
          sudo ./install-clj-kondo
      - name: Setup container-structured-test
        run: |
          curl -fsLO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
      - name: Setup kubeval
        run: |
          curl -fsLO https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo cp kubeval /usr/local/bin
      - name: Setup shellcheck
        run: sudo apt-get install -y --no-install-recommends shellcheck
      - name: Setup yamllint
        run: sudo apt-get install -y --no-install-recommends yamllint
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.m2
          key: ${{ runner.os }}-clj-${{ hashFiles('deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-clj-
      - uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: deployments/production/Dockerfile
      - name: Set dummy production secrets
        working-directory: deployments/production
        run: |
          mkdir -p secret
          echo -n PROJECT_ID > secret/GCLOUD_PROJECT_ID
          echo -n MACKEREL_APIKEY > secret/MACKEREL_APIKEY
          echo -n MACKEREL_HOST_ID > secret/MACKEREL_HOST_ID
          echo -n MACKEREL_ROLE > secret/MACKEREL_ROLE
          echo -n '{"GCLOUD_SERVICE_ACCOUNT_KEY:"JSON"}' > secret/gcloud_service_account_key.json
      - name: Test
        run: |
          make -j test
